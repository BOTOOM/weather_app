{"version":3,"sources":["hooks/useVanta.jsx","components/WelcomeScreen/WelcomeScreen.jsx","pages/WelcomePage.jsx","generic/ErrorBoundary/ErrorBoundary.jsx","components/AppFrame/AppFrame.jsx","utils/urls.jsx","components/IconState/IconState.jsx","utils/utils.jsx","utils/transform/getAllWeather.jsx","hooks/useCityList.jsx","components/CityInfo/CityInfo.jsx","components/Weather/Weather.jsx","WeatherContext.jsx","components/CityList/CityList.jsx","utils/serviceCities.jsx","pages/MainPage.jsx","components/WeatherDetails/WeatherDetails.jsx","components/ForecastChart/ForecastChart.jsx","components/ForecastItem/ForecastItem.jsx","components/Forecast/Forecast.jsx","utils/transform/getChartData.jsx","utils/transform/getForecastItemList.jsx","hooks/useCityPage.jsx","pages/CityPage.jsx","pages/NotFoundPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useVanta","myRefDiv","useRef","useState","vanta","setVanta","useEffect","Clouds","THREE","el","current","destroy","WelcomeScreen","children","className","ref","WelcomePage","iconContextSize","useMemo","size","Grid","container","direction","justify","item","xs","alignItems","Provider","value","Typography","variant","color","Link","aria-label","component","RouterLink","to","ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","PureComponent","AppFrame","AppBar","position","Toolbar","IconButton","LinkRouter","sm","md","lg","appid","getWeatherUrl","city","countryCode","getForecastUrl","validValues","stateByName","clouds","WiDayCloudy","clear","WiDaySunny","rain","WiRain","snow","WiSnow","drizzle","WiRaindrop","thunderstorm","WiThunderstorm","IconState","StateByName","getCityCode","toCelsius","temp","Number","convertUnits","from","toFixed","getAllWeather","response","data","temperature","main","humidity","wind","speed","stateFromServer","weather","toLowerCase","includes","propName","propValue","useCityList","cities","allWeather","actions","setError","setWeather","a","url","type","payload","axios","get","allWeatherAux","request","forEach","CityInfo","country","display","Weather","spacing","Skeleton","height","width","WeatherStateContext","React","createContext","WeatherDispatchContext","initialValue","allChartData","allForecastItemList","reducer","action","weatherCity","newAllWeather","chartDataCity","newAllChartData","forecastItemListCity","newAllForecastItemListCity","WeatherContext","useReducer","dispatch","useWeatherDispatchContext","useContext","Error","useWeatherStateContext","CityListItem","memo","eventOnClickCity","ListItem","button","onClick","CityList","onClickCity","Alert","onClose","severity","List","map","cityAndCountry","MainPage","history","useHistory","onClickHandler","useCallback","push","Paper","elevation","WeatherDetails","ForecastChart","marginSize","top","bottom","left","right","margin","dataKey","stroke","ForecastItem","weekDay","hour","Forecast","forecastItemList","forecast","data-testid","renderForecastItem","getChartData","d","moment","add","day","tempObjArray","list","filter","unix","dt","dayOfYear","temps","dayHour","format","min","Math","max","hasTemps","length","getForecastItemList","interval","index","useCityPage","useParams","useDebugValue","getForecast","cityCode","dataAux","forecastItemListAux","CityPage","chartData","c","getCountryNameByCountryCode","LinearProgress","NotFoundPage","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0OAyBeA,EArBE,WACb,IAAMC,EAAWC,iBAAO,MADL,EAEOC,mBAAS,GAFhB,mBAEZC,EAFY,KAELC,EAFK,KAkBnB,OAdAC,qBAAU,WAON,OANKF,GACDC,EAASE,IAAO,CACZC,QACAC,GAAIR,EAASS,WAGd,WACCN,GACAA,EAAMO,aAGf,CAACP,IAEGH,G,OCJIW,EAdO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfZ,EAAWD,IAEjB,OACI,qBAAKc,UAAU,OAAOC,IAAKd,EAA3B,SACKY,K,0CCuCEG,EAvCK,WAChB,IAAMC,EAAkBC,mBAAQ,iBAAO,CAAEC,KAAK,SAAS,IACvD,OACI,cAAC,EAAD,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,SACVC,QAAQ,SACRT,UAAU,OAHd,SAII,qBAAKA,UAAU,YAAf,SACI,eAACM,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACI,GAAI,GACrBF,QAAQ,SACRG,WAAW,SAFf,UAGI,cAACN,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,IAAYG,SAAb,CAAsBC,MAAOX,EAA7B,SACI,cAAC,IAAD,QAGR,eAACG,EAAA,EAAD,CAAMI,MAAI,EACNH,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRG,WAAW,SAJf,UAKI,cAACG,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,yBAGA,cAACC,EAAA,EAAD,CAAMD,MAAM,UACRE,aAAW,OACXC,UAAWC,IACXC,GAAG,oBAHP,mC,gECHbC,E,kDA3BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAJC,E,qDAanB,SAAkBC,EAAOC,GACrBC,QAAQC,IAAI,YAAaF,K,oBAG7B,WACI,OACIG,KAAKN,MAAMC,SACV,+CAEAK,KAAKP,MAAMzB,Y,uCAbpB,SAAgC4B,GAC5B,MAAO,CAAED,UAAU,O,GAZCM,iBCkDbC,EAvCE,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SAEVI,EAAkBC,mBAAQ,iBAAO,CAACC,KAAK,SAAS,IACtD,OACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EACXE,QAAQ,SADZ,UAEI,cAACyB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAASpB,QAAQ,QAAjB,UACI,cAACqB,EAAA,EAAD,CAAYpB,MAAM,UAAUE,aAAW,OAAvC,SACI,cAACD,EAAA,EAAD,CACIE,UAAWkB,IACXhB,GAAG,QACHL,MAAM,UACNE,aAAW,OAJf,SAKI,cAAC,IAAYN,SAAb,CAAsBC,MAAOX,EAA7B,SACI,cAAC,IAAD,UAIZ,cAACY,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,8BAKR,cAACX,EAAA,EAAD,CAAMI,MAAI,EACNC,GAAI,GACJ4B,GAAI,GACJC,GAAI,GACJC,GAAI,EAJR,SAKI,cAAC,EAAD,UAAgB1C,U,qFCzC1B2C,EAAQ,mCAEDC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,kEAC4BD,EAD5B,YACoCC,EADpC,kBACyDH,IAGzEI,EAAiB,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,mEAC4BD,EAD5B,YACoCC,EADpC,kBACyDH,ICC1EK,EAAc,CACnB,SACA,QACA,OACA,OACA,UACA,gBAGFC,EAAc,CAChBC,OAAQC,IACRC,MAAOC,IACPC,KAAMC,IACNC,KAAMC,IACNC,QAASC,IACTC,aAAcC,KAcHC,EAXG,SAAC,GAAe,IAAbpC,EAAY,EAAZA,MACXqC,EAAcd,EAAYvB,GAChC,OACI,cAACqC,EAAD,K,kBC5BKC,EAAc,SAACnB,EAAMC,GAAP,gBAA0BD,EAA1B,YAAkCC,IAEhDmB,EAAY,SAACC,GAAD,OAAUC,OAAOC,IAAaF,GAAMG,KAAK,KAAK9C,GAAG,KAAK+C,QAAQ,KCgBxEC,EAjBO,SAACC,EAAU3B,EAAMC,GAAiB,IAC5C2B,EAASD,EAATC,KACFC,EAAcT,EAAUQ,EAAKE,KAAKT,MAClCU,EAAWH,EAAKE,KAAKC,SACrBC,EAAOJ,EAAKI,KAAKC,MAEjBC,EAAkBN,EAAKO,QAAQ,GAAGL,KAAKM,cAEvCvD,EAAQsB,EAAYkC,SAASH,GAAmBA,EAAkB,KAElEI,EAAWnB,EAAYnB,EAAMC,GAC7BsC,EAAY,CAAEV,cAAahD,QAAOkD,WAAUC,QAElD,OAAO,eAAIM,EAAWC,ICoCXC,EA9CK,SAACC,EAAQC,EAAYC,GAAY,MAEvBlG,mBAAS,MAFc,mBAE1CsC,EAF0C,KAEnC6D,EAFmC,KA2CjD,OAvCAhG,qBAAU,WACN,IAAMiG,EAAU,uCAAG,WAAO7C,EAAMC,GAAb,qBAAA6C,EAAA,6DAETC,EAAMhD,EAAc,CAACC,OAAMC,gBAFlB,SAKLqC,EAAWnB,EAAYnB,EAAMC,GAGnC0C,EAAQ,CAAEK,KAAM,kBAAmBC,QAAQ,eAAIX,EAAW,MAR/C,SAUYY,IAAMC,IAAIJ,GAVtB,OAULpB,EAVK,OAYLyB,EAAgB1B,EAAcC,EAAU3B,EAAMC,GAIpD0C,EAAQ,CAAEK,KAAM,kBAAmBC,QAASG,IAhBjC,kDAmBP,KAAMzB,SACNiB,EAAS,iDACF,KAAMS,QACbT,EAAS,uCAETA,EAAS,6BAxBF,0DAAH,wDA8BhBH,EAAOa,SAAQ,YAA4B,IAAzBtD,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACfyC,EAAWvB,EAAYnB,EAAMC,KAC9B4C,EAAW7C,EAAMC,QAI1B,CAACwC,EAAQC,EAAYC,IAEjB,CAAE5D,QAAO6D,aC/BLW,GAdE,SAAC,GAAuB,IAArBvD,EAAoB,EAApBA,KAAMwD,EAAc,EAAdA,QACtB,OACI,qCACI,eAACrF,EAAA,EAAD,CAAYsF,QAAQ,SAASrF,QAAQ,KAArC,UAA2C4B,EAA3C,QACA,cAAC7B,EAAA,EAAD,CAAYsF,QAAQ,SAASrF,QAAQ,KAArC,SAA2CoF,Q,UC+BxCE,GA/BC,SAAC,GAA4B,IAA1B7B,EAAyB,EAAzBA,YAAahD,EAAY,EAAZA,MACtBtB,EAAkBC,mBAAQ,iBAAO,CAAEC,KAAK,SAAS,IACvD,OACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAChBF,UAAU,MACVC,QAAQ,SACRG,WAAW,SACX2F,QAAS,EAJb,UAKI,cAAC,IAAY1F,SAAb,CAAsBC,MAAOX,EAA7B,SAEQsB,EACA,cAAC,EAAD,CAAWA,MAAOA,IAElB,cAAC+E,GAAA,EAAD,CAAUxF,QAAQ,SAASyF,OAAQ,GAAIC,MAAO,OAIlDjC,EACA,cAAC1D,EAAA,EAAD,CAAYsF,QAAQ,SAASrF,QAAQ,KAArC,SAA2CyD,IAE3C,cAAC+B,GAAA,EAAD,CAAUxF,QAAQ,OAAOyF,OAAQ,GAAIC,MAAO,SCzBtDC,GAAsBC,IAAMC,gBAE5BC,GAAyBF,IAAMC,gBAG/BE,GAAe,CACjBzB,WAAY,GACZ0B,aAAc,GACdC,oBAAqB,IAGnBC,GAAU,SAACzF,EAAO0F,GACpB,OAAQA,EAAOvB,MACX,IAAK,kBACD,IAAMwB,EAAcD,EAAOtB,QACrBwB,EAAa,2BAAQ5F,EAAM6D,YAAe8B,GAChD,OAAO,2BAAK3F,GAAZ,IAAmB6D,WAAY+B,IACnC,IAAK,iBACD,IAAMC,EAAgBH,EAAOtB,QACvB0B,EAAe,2BAAQ9F,EAAMuF,cAAiBM,GACpD,OAAO,2BAAK7F,GAAZ,IAAmBuF,aAAcO,IACrC,IAAK,yBACD,IAAMC,EAAuBL,EAAOtB,QAC9B4B,EAA0B,2BAAQhG,EAAMwF,qBAAwBO,GACtE,OAAO,2BAAK/F,GAAZ,IAAmBwF,oBAAqBQ,IAC5C,QACI,OAAOhG,IAIbiG,GAAiB,SAAC,GAAgB,IAAf3H,EAAc,EAAdA,SAAc,EACT4H,qBAAWT,GAASH,IADX,mBAC5BtF,EAD4B,KACrBmG,EADqB,KAEnC,OACI,cAACd,GAAuBjG,SAAxB,CAAiCC,MAAO8G,EAAxC,SACI,cAACjB,GAAoB9F,SAArB,CAA8BC,MAAOW,EAArC,SACK1B,OAKX8H,GAA4B,WAC9B,IAAMD,EAAWE,qBAAWhB,IAE5B,IAAKc,EACD,MAAMG,MAAM,8BAGhB,OAAOH,GAGLI,GAAyB,WAC3B,IAAMvG,EAAQqG,qBAAWnB,IAEzB,IAAKlF,EACD,MAAMsG,MAAM,2BAGhB,OAAOtG,GChDLwG,GAAerB,IAAMsB,MAAK,YAAkF,IAA1DtF,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,YAAauD,EAAsC,EAAtCA,QAASrB,EAA6B,EAA7BA,QAASoD,EAAoB,EAApBA,iBACzF,OACI,cAACC,EAAA,EAAD,CACIC,QAAM,EACNC,QAAS,kBAAMH,EAAiBvF,EAAMC,IAF1C,SAGI,eAACvC,EAAA,EAAD,CAAMC,WAAS,EACXE,QAAQ,SACRG,WAAW,SAFf,UAII,cAACN,EAAA,EAAD,CAAMI,MAAI,EACN8B,GAAI,EACJ7B,GAAI,GAFR,SAGI,cAAC,GAAD,CAAUiC,KAAMA,EAAMwD,QAASA,MAEnC,cAAC9F,EAAA,EAAD,CAAMI,MAAI,EACN8B,GAAI,EACJ7B,GAAI,GAFR,SAGI,cAAC,GAAD,CACI8D,YAAaM,GAAWA,EAAQN,YAChChD,MAAOsD,GAAWA,EAAQtD,kBAoB5C8G,GAAW,SAAC,GAA6B,IAA3BlD,EAA0B,EAA1BA,OAAQmD,EAAkB,EAAlBA,YAClBjD,EAAUsC,KAGRvC,EAFK0C,KAEL1C,WAJkC,EAKdF,EAAYC,EAAQC,EAAYC,GAApD5D,EALkC,EAKlCA,MAAO6D,EAL2B,EAK3BA,SAEf,OACI,gCAEQ7D,GAAS,cAAC8G,EAAA,EAAD,CAAOC,QAAS,kBAAMlD,EAAS,OAAOmD,SAAS,QAA/C,SAAwDhH,IAErE,cAACiH,EAAA,EAAD,UAEQvD,EAAOwD,KAAI,SAAAC,GAAc,OAzBhBX,EAyByCK,EAzBrB,SAACM,EAAgB/D,GAAa,IACnEnC,EAAsBkG,EAAtBlG,KAAMC,EAAgBiG,EAAhBjG,YAEd,OAAO,cAAC,GAAD,aACKsF,iBAAkBA,EAClBpD,QAASA,GACL+D,GAHU/E,EAAYnB,EAAMC,MAsBmCiG,EAC3DxD,EAAWvB,EAAY+E,EAAelG,KAAMkG,EAAejG,eA1BtD,IAAAsF,WA6CdvB,OAAMsB,KAAKK,ICrFpBlD,GAAS,CACX,CAAEzC,KAAM,eAAgBwD,QAAS,YAAavD,YAAa,MAC3D,CAAED,KAAM,YAAUwD,QAAS,WAAYvD,YAAa,MACpD,CAAED,KAAM,SAAUwD,QAAS,YAAUvD,YAAa,MAClD,CAAED,KAAM,sBAAoBwD,QAAS,YAAUvD,YAAa,OCqBjDkG,GAlBE,WACb,IAAMC,EAAUC,cAEVC,EAAiBtC,IAAMuC,aAAY,SAACvG,EAAMC,GAC5CmG,EAAQI,KAAR,4BAAkCvG,EAAlC,YAAiDD,MAClD,CAACoG,IAEJ,OACI,cAAC,EAAD,UACI,cAACK,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACI,cAAC,GAAD,CACIjE,ODXYA,GCYZmD,YAAaU,S,UCDlBK,GAdQ,SAAC,GAAwB,IAAtB5E,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAChC,OACI,qCACI,eAAC7D,EAAA,EAAD,uBAAsB4D,EAAtB,OACA,eAAC5D,EAAA,EAAD,sBAAqB6D,EAArB,e,SCgCG4E,GA7BO,SAAC,GAAc,IAAZhF,EAAW,EAAXA,KACfiF,EAAarJ,mBAAQ,iBAAO,CAAEsJ,IAAK,GAAIC,OAAQ,GAAIC,KAAM,EAAGC,MAAO,KAAM,IAC/E,OACI,cAAC,KAAD,CAAqBpD,OAAQ,IAAKC,MAAO,MAAzC,SACI,eAAC,KAAD,CACIoD,OAAQL,EACRjF,KAAMA,EAFV,UAGI,cAAC,KAAD,CAAOuF,QAAQ,YACf,cAAC,KAAD,IACA,cAAC,KAAD,IACA,cAAC,KAAD,IACA,cAAC,KAAD,IACA,cAAC,KAAD,CAAMnE,KAAK,WAAWmE,QAAQ,MAAMC,OAAO,YAC3C,cAAC,KAAD,CAAMpE,KAAK,WAAWmE,QAAQ,MAAMC,OAAO,kBCe5CC,GAhCM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,KAAM1I,EAAyB,EAAzBA,MAAOgD,EAAkB,EAAlBA,YACpCtE,EAAkBC,mBAAQ,iBAAO,CAAEC,KAAK,SAAS,IACvD,OACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,SACVC,QAAQ,SACRG,WAAW,SAHf,UAII,cAACN,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACK,EAAA,EAAD,UAAamJ,MAEjB,cAAC5J,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACK,EAAA,EAAD,UAAaoJ,MAEjB,cAAC7J,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,IAAYG,SAAb,CAAsBC,MAAOX,EAA7B,SACI,cAAC,EAAD,CAAWsB,MAAOA,QAG1B,cAACnB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACK,EAAA,EAAD,WAAa0D,EAAb,iBC4BD2F,GA9BE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAChB,OACI,cAAC/J,EAAA,EAAD,CAAMC,WAAS,EACXE,QAAQ,eACRG,WAAW,SAFf,SAIQyJ,EAAiBxB,KAAI,SAAAyB,GAAQ,OAxBlB,SAAAA,GAAa,IAC5BJ,EAAsCI,EAAtCJ,QAASC,EAA6BG,EAA7BH,KAAM1I,EAAuB6I,EAAvB7I,MAAOgD,EAAgB6F,EAAhB7F,YAG9B,OACI,cAACnE,EAAA,EAAD,CACIiK,cAAY,0BACZ7J,MAAI,EAFR,SAGI,cAAC,GAAD,CACIyJ,KAAMA,EACND,QAASA,EACTzI,MAAOA,EACPgD,YAAaA,KAPrB,UAEiByF,GAFjB,OAE2BC,IAiBcK,CAAmBF,S,8BCArDG,GA3BM,SAACjG,GAClB3C,QAAQC,IAAI,OAAQ0C,GAuBpB,MArBkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACXqE,KAAI,SAAA6B,GAAC,OAAIC,OAASC,IAAIF,EAAG,QAC3B7B,KAAI,SAAAgC,GACrB,IAAMC,EAAetG,EAAKuG,KAAKC,QAAO,SAAAtK,GAElC,OADkBiK,KAAOM,KAAKvK,EAAKwK,IAAIC,cAClBN,EAAIM,eAE7BtJ,QAAQC,IAAI,kBAAmB+I,EAAIM,aACnCtJ,QAAQC,IAAI,eAAgBgJ,GAE5B,IAAMM,EAAQN,EAAajC,KAAI,SAAAnI,GAAI,OAAIA,EAAKgE,KAAKT,QAGjD,MAAQ,CACJoH,QAASR,EAAIS,OAAO,OACpBC,IAAKvH,EAAUwH,KAAKD,IAAL,MAAAC,KAAI,aAAQJ,KAC3BK,IAAKzH,EAAUwH,KAAKC,IAAL,MAAAD,KAAI,aAAQJ,KAC3BM,SAAWN,EAAMO,OAAS,MAE/BX,QAAO,SAAAtK,GAAI,OAAIA,EAAKgL,aCJZE,I,OAjBa,SAACpH,GAEzB,IAAMqH,EAAW,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,IAYpC,OAV4BrH,EAAKuG,KAC5BC,QAAO,SAACtK,EAAMoL,GAAP,OAAiBD,EAAS5G,SAAS6G,MAC1CjD,KAAI,SAAAnI,GACD,MAAQ,CACJyJ,KAAMQ,KAAOM,KAAKvK,EAAKwK,IAAIf,OAC3BD,QAASS,KAAOM,KAAKvK,EAAKwK,IAAII,OAAO,QACrC7J,MAAOf,EAAKqE,QAAQ,GAAGL,KAAKM,cAC5BP,YAAaT,EAAUtD,EAAKgE,KAAKT,YC6BlC8H,GApCK,SAAC/E,EAAcC,EAAqB1B,GAAa,IAAD,EAClCyG,cAAtBpJ,EADwD,EACxDA,KAAMC,EADkD,EAClDA,YAgCd,OA9BAoJ,wBAAc,eAAD,OAAgBrJ,IAE7BpD,qBAAU,WACN,IAAM0M,EAAW,uCAAG,sCAAAxG,EAAA,6DACVC,EAAM7C,EAAe,CAAEF,OAAMC,gBAC7BsJ,EAAWpI,EAAYnB,EAAMC,GAFnB,kBAIWiD,IAAMC,IAAIJ,GAJrB,gBAIJnB,EAJI,EAIJA,KAEF4H,EAAU3B,GAAajG,GAG7Be,EAAQ,CAAEK,KAAM,iBAAkBC,QAAQ,eAAIsG,EAAWC,KACnDC,EAAsBT,GAAoBpH,GAGhDe,EAAQ,CAAEK,KAAM,yBAA0BC,QAAQ,eAAIsG,EAAWE,KAbrD,kDAeZxK,QAAQC,IAAR,MAfY,0DAAH,qDAkBXqK,EAAWpI,EAAYnB,EAAMC,GAE/BmE,GAAgBC,IAAwBD,EAAamF,KAAclF,EAAoBkF,IACvFD,MAIL,CAACtJ,EAAMC,EAAa0C,EAASyB,EAAcC,IAEvC,CAAErE,OAAMC,gBCyCJyJ,GAnEE,WACb,IAAM/G,EAAUsC,KACVrD,EAAOwD,KAEL1C,EAAkDd,EAAlDc,WAAY0B,EAAsCxC,EAAtCwC,aAAcC,EAAwBzC,EAAxByC,oBAJf,EAMW8E,GAAY/E,EAAcC,EAAqB1B,GAArE3C,EANW,EAMXA,KAAMC,EANK,EAMLA,YAERwC,EAASjF,mBAAQ,iBAAO,CAAC,CAAEwC,OAAMC,kBAAiB,CAACD,EAAMC,IAE/DuC,EAAYC,EAAQC,EAAYC,GAEhC,IAAM4G,EAAWpI,EAAYnB,EAAMC,GAE7BkC,EAAUO,EAAW6G,GACrBI,EAAYvF,EAAamF,GACzB9B,EAAmBpD,EAAoBkF,GAEvC/F,EAAUvD,GTxBuB,SAACA,GAAD,OACvCwC,GAAO2F,QAAO,SAAAwB,GAAC,OAAIA,EAAE3J,cAAgBA,KAAa,GAAGuD,QSuBtBqG,CAA4B5J,GACrD8B,EAAWI,GAAWA,EAAQJ,SAC9BC,EAAOG,GAAWA,EAAQH,KAE1BnD,EAAQsD,GAAWA,EAAQtD,MAC3BgD,EAAcM,GAAWA,EAAQN,YAEvC,OACI,cAAC,EAAD,UACI,eAACnE,EAAA,EAAD,CAAMC,WAAS,EACXE,QAAQ,eACRD,UAAU,SACV+F,QAAS,EAHb,UAII,cAACjG,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAChBI,GAAI,GACJF,QAAQ,SACRG,WAAW,WAHf,SAII,cAAC,GAAD,CAAUgC,KAAMA,EAAMwD,QAASA,MAEnC,eAAC9F,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACC,GAAI,GACrBF,QAAQ,SADZ,UAEI,cAAC,GAAD,CAASgB,MAAOA,EAAOgD,YAAaA,IAEhCE,GAAYC,GACZ,cAAC,GAAD,CACID,SAAUA,EACVC,KAAMA,OAGlB,cAACtE,EAAA,EAAD,CAAMI,MAAI,EAAV,UAES6L,IAAclC,GAAoB,cAACqC,GAAA,EAAD,MAG3C,cAACpM,EAAA,EAAD,CAAMI,MAAI,EAAV,SAEQ6L,GAAa,cAAC,GAAD,CAAe/H,KAAM+H,MAG1C,cAACjM,EAAA,EAAD,CAAMI,MAAI,EAAV,SAEQ2J,GAAoB,cAAC,GAAD,CAAUA,iBAAkBA,YC7BzDsC,GArCM,WACjB,OACI,cAACrM,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,SACVC,QAAQ,SACRT,UAAU,OAHd,SAII,qBAAKA,UAAU,YAAf,SACI,eAACM,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACI,GAAI,GACrBF,QAAQ,SACRG,WAAW,SAFf,UAGI,cAACN,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,IAAYG,SAAb,CAAsBC,MAAO,CAAET,KAAK,OAApC,SACI,cAAC,IAAD,QAGR,eAACC,EAAA,EAAD,CAAMI,MAAI,EACNH,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRG,WAAW,SAJf,UAKI,cAACG,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,0CAGA,cAACC,EAAA,EAAD,CAAMD,MAAM,UACRE,aAAW,OACXC,UAAWC,IACXC,GAAG,QAHP,yCCETsL,GAvBH,WACR,OACI,cAAC,GAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,eAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,oBAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,uCAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,UACI,cAAC,GAAD,cCbJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,cAAC,GAAD,IACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnM,GACLE,QAAQF,MAAMA,EAAMoM,c","file":"static/js/main.feb10a89.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react'\r\nimport Clouds from 'vanta/dist/vanta.clouds.min'\r\nimport * as THREE from 'three'\r\n\r\nconst useVanta = () => {\r\n    const myRefDiv = useRef(null) \r\n    const [vanta, setVanta] = useState(0) \r\n\r\n    useEffect(() => {\r\n        if (!vanta) {\r\n            setVanta(Clouds({\r\n                THREE,\r\n                el: myRefDiv.current\r\n            })) \r\n        }\r\n        return () => {\r\n            if (vanta) {\r\n                vanta.destroy()\r\n            }\r\n        }\r\n    }, [vanta])\r\n\r\n    return myRefDiv\r\n}\r\n\r\nexport default useVanta","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useVanta from './../../hooks/useVanta'\r\n\r\nconst WelcomeScreen = ({ children }) => {\r\n    const myRefDiv = useVanta()\r\n\r\n    return (\r\n        <div className=\"full\" ref={myRefDiv}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nWelcomeScreen.propTypes = {\r\n    children: PropTypes.node,\r\n}\r\n\r\nexport default WelcomeScreen\r\n","import React, { useMemo } from 'react'\r\nimport WelcomeScreen from './../components/WelcomeScreen'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { IconContext } from 'react-icons'\r\nimport { WiDaySunny } from 'react-icons/wi'\r\n\r\nconst WelcomePage = () => {\r\n    const iconContextSize = useMemo(() => ({ size:'6em'}), [])\r\n    return (\r\n        <WelcomeScreen>\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                className=\"full\">\r\n                <div className=\"highlight\">\r\n                    <Grid item container xs={12}\r\n                        justify=\"center\"\r\n                        alignItems=\"center\">\r\n                        <Grid item>\r\n                            <IconContext.Provider value={iconContextSize}>\r\n                                <WiDaySunny />\r\n                            </IconContext.Provider>\r\n                        </Grid>\r\n                        <Grid item\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\">\r\n                            <Typography variant=\"h4\" color=\"inherit\">\r\n                                Weather App\r\n                            </Typography>\r\n                            <Link color=\"inherit\"\r\n                                aria-label=\"menu\"\r\n                                component={RouterLink}\r\n                                to=\"/weather_app/main\">\r\n                                Ingresar\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Grid>\r\n        </WelcomeScreen>\r\n    )\r\n}\r\n\r\nexport default WelcomePage\r\n","import React, { PureComponent } from 'react'\r\n\r\nclass ErrorBoundary extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // this.setState(getDerivedStateFromError(error))\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(\"ErrorInfo\", errorInfo)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.hasError ?\r\n            (<h1>Hubo un error</h1>)\r\n            :\r\n            (this.props.children)\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { IconContext } from 'react-icons'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport { Link as LinkRouter } from 'react-router-dom'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { WiDaySunny } from 'react-icons/wi'\r\nimport ErrorBoundary from './../../generic/ErrorBoundary'\r\n\r\nconst AppFrame = ({ children }) => {\r\n\r\n    const iconContextSize = useMemo(() => ({size:'2em'}), [])\r\n    return (\r\n        <Grid container\r\n            justify=\"center\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <IconButton color=\"inherit\" aria-label=\"menu\">\r\n                        <Link \r\n                            component={LinkRouter}\r\n                            to=\"/main\" \r\n                            color=\"inherit\" \r\n                            aria-label=\"menu\">\r\n                            <IconContext.Provider value={iconContextSize}>\r\n                                <WiDaySunny />\r\n                            </IconContext.Provider>\r\n                        </Link>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        Weather App\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid item\r\n                xs={12}\r\n                sm={11}\r\n                md={10}\r\n                lg={8}>\r\n                <ErrorBoundary>{children}</ErrorBoundary>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nAppFrame.propTypes = {\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default AppFrame\r\n","\r\nconst appid = \"f99bbd9e4959b513e9bd0d7f7356b38d\"\r\n\r\nexport const getWeatherUrl = ({ city, countryCode }) => (\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${appid}`\r\n)\r\n\r\nexport const getForecastUrl = ({ city, countryCode }) => (\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&appid=${appid}`\r\n)\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { WiDayCloudy,\r\n    WiDaySunny,\r\n    WiRain,\r\n    WiSnow,\r\n    WiRaindrop,\r\n    WiThunderstorm } from 'react-icons/wi'\r\n   \r\nexport const validValues = [\r\n        \"clouds\",\r\n        \"clear\",\r\n        \"rain\",\r\n        \"snow\",\r\n        \"drizzle\",\r\n        \"thunderstorm\"\r\n    ]\r\n\r\nconst stateByName = {\r\n    clouds: WiDayCloudy,\r\n    clear: WiDaySunny,\r\n    rain: WiRain,\r\n    snow: WiSnow, \r\n    drizzle: WiRaindrop,\r\n    thunderstorm: WiThunderstorm\r\n}\r\n\r\nconst IconState = ({ state }) => {\r\n    const StateByName = stateByName[state]\r\n    return (\r\n        <StateByName />\r\n    )\r\n}\r\n\r\nIconState.propTypes = {\r\n    state: PropTypes.oneOf(validValues).isRequired,\r\n}\r\n\r\nexport default IconState\r\n","import convertUnits from 'convert-units'\r\n\r\nexport const getCityCode = (city, countryCode) => `${city}-${countryCode}`\r\n\r\nexport const toCelsius = (temp) => Number(convertUnits(temp).from('K').to('C').toFixed(0))","import { validValues } from './../../components/IconState'\r\nimport { getCityCode, toCelsius } from './../utils'\r\n\r\nconst getAllWeather = (response, city, countryCode) => {\r\n    const { data } = response\r\n    const temperature = toCelsius(data.main.temp)\r\n    const humidity = data.main.humidity\r\n    const wind = data.wind.speed\r\n\r\n    const stateFromServer = data.weather[0].main.toLowerCase()\r\n\r\n    const state = validValues.includes(stateFromServer) ? stateFromServer : null // data.weather[0].main.toLowerCase()\r\n\r\n    const propName = getCityCode(city, countryCode)\r\n    const propValue = { temperature, state, humidity, wind } // Ej: { temperature: 10, state: \"sunny\" }\r\n\r\n    return ({ [propName]: propValue })             \r\n\r\n}\r\n\r\nexport default getAllWeather","import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { getWeatherUrl } from './../utils/urls'\r\nimport getAllWeather from './../utils/transform/getAllWeather'\r\nimport { getCityCode } from './../utils/utils'\r\n\r\nconst useCityList = (cities, allWeather, actions) => {\r\n    // const [allWeather, setAllWeather] = useState({})\r\n    const [error, setError] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const setWeather = async (city, countryCode) => {\r\n\r\n            const url = getWeatherUrl({city, countryCode})\r\n\r\n            try {\r\n                const propName = getCityCode(city, countryCode)\r\n\r\n                // onSetAllWeather({ [propName]: {} })\r\n                actions({ type: 'SET_ALL_WEATHER', payload: { [propName]: {} }})\r\n\r\n                const response = await axios.get(url)\r\n\r\n                const allWeatherAux = getAllWeather(response, city, countryCode)\r\n\r\n                // setAllWeather(allWeather => ({ ...allWeather, ...allWeatherAux })\r\n                // onSetAllWeather(allWeatherAux)\r\n                actions({ type: 'SET_ALL_WEATHER', payload: allWeatherAux}) \r\n\r\n            } catch (error) {\r\n                if (error.response) { // Errores que nos responde el server\r\n                    setError(\"Ha ocurrido un error en el servidor del clima\")\r\n                } else if (error.request) { // Errores que suceden por no llegar al server\r\n                    setError(\"Verifique la conexión a internet\")\r\n                } else { // Errores imprevistos\r\n                    setError(\"Error al cargar los datos\")\r\n                }                \r\n            }\r\n\r\n        }\r\n\r\n        cities.forEach(({ city, countryCode }) => {\r\n            if (!allWeather[getCityCode(city, countryCode)]) {  // {}\r\n                setWeather(city, countryCode)\r\n            }\r\n        });\r\n\r\n    }, [cities, allWeather, actions])\r\n\r\n    return { error, setError }\r\n}\r\n\r\nexport default useCityList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst CityInfo = ({ city, country }) => {\r\n    return (\r\n        <>\r\n            <Typography display=\"inline\" variant=\"h4\">{city}, </Typography>\r\n            <Typography display=\"inline\" variant=\"h6\">{country}</Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nCityInfo.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CityInfo\r\n","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport { IconContext } from 'react-icons'\r\nimport IconState, { validValues } from './../IconState'\r\n\r\nconst Weather = ({ temperature, state }) => {\r\n    const iconContextSize = useMemo(() => ({ size:'6em'}), [])\r\n    return (\r\n        <Grid container item\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}>\r\n            <IconContext.Provider value={iconContextSize}>\r\n                {\r\n                    state ? \r\n                    <IconState state={state} />\r\n                    :\r\n                    <Skeleton variant=\"circle\" height={80} width={80}></Skeleton>\r\n                }\r\n            </IconContext.Provider>\r\n            {\r\n                temperature ? \r\n                <Typography display=\"inline\" variant=\"h2\">{temperature}</Typography>\r\n                :\r\n                <Skeleton variant=\"rect\" height={80} width={80}></Skeleton>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nWeather.propTypes = {\r\n    temperature: PropTypes.number,\r\n    state: PropTypes.oneOf(validValues),\r\n}\r\n\r\nexport default Weather\r\n","import React, { useReducer, useContext } from 'react'\r\n\r\n\r\nconst WeatherStateContext = React.createContext()\r\n\r\nconst WeatherDispatchContext = React.createContext()\r\n\r\n\r\nconst initialValue = {\r\n    allWeather: {},\r\n    allChartData: {}, \r\n    allForecastItemList: {}\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_ALL_WEATHER':\r\n            const weatherCity = action.payload\r\n            const newAllWeather = { ...state.allWeather, ...weatherCity }\r\n            return { ...state, allWeather: newAllWeather }\r\n        case 'SET_CHART_DATA':\r\n            const chartDataCity = action.payload \r\n            const newAllChartData = { ...state.allChartData, ...chartDataCity }\r\n            return { ...state, allChartData: newAllChartData }\r\n        case 'SET_FORECAST_ITEM_LIST':\r\n            const forecastItemListCity = action.payload\r\n            const newAllForecastItemListCity = { ...state.allForecastItemList, ...forecastItemListCity }\r\n            return { ...state, allForecastItemList: newAllForecastItemListCity }\r\n        default:\r\n            return state \r\n    }\r\n}\r\n\r\nconst WeatherContext = ({children}) => {\r\n    const [state, dispatch] = useReducer(reducer, initialValue)\r\n    return (\r\n        <WeatherDispatchContext.Provider value={dispatch}>\r\n            <WeatherStateContext.Provider value={state}>\r\n                {children}\r\n            </WeatherStateContext.Provider>\r\n        </WeatherDispatchContext.Provider>    )\r\n}\r\n\r\nconst useWeatherDispatchContext = () => {\r\n    const dispatch = useContext(WeatherDispatchContext)\r\n\r\n    if (!dispatch) {\r\n        throw Error(\"Must set dispatch provider\")\r\n    }\r\n\r\n    return dispatch\r\n}\r\n\r\nconst useWeatherStateContext = () => {\r\n    const state = useContext(WeatherStateContext)\r\n\r\n    if (!state) {\r\n        throw Error(\"Must set state provider\")\r\n    }    \r\n\r\n    return state    \r\n}\r\n\r\nexport { \r\n    WeatherContext, \r\n    useWeatherDispatchContext, \r\n    useWeatherStateContext\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport useCityList from './../../hooks/useCityList'\r\nimport CityInfo from './../CityInfo'\r\nimport Weather from './../Weather'\r\nimport { getCityCode } from './../../utils/utils'\r\nimport { useWeatherDispatchContext, useWeatherStateContext } from '../../WeatherContext'\r\n\r\nconst CityListItem = React.memo(function CityListItem({ city, countryCode, country, weather, eventOnClickCity }) {\r\n    return (\r\n        <ListItem\r\n            button\r\n            onClick={() => eventOnClickCity(city, countryCode)} >\r\n            <Grid container \r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item\r\n                    md={9}\r\n                    xs={12}>\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                <Grid item\r\n                    md={3}\r\n                    xs={12}>\r\n                    <Weather \r\n                        temperature={weather && weather.temperature} \r\n                        state={weather && weather.state} /> \r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    )\r\n})\r\n\r\n// li: es un item (según tag html, tiene el role \"listitem\")\r\n// renderCityAndCountry se va a convertir en una función que retorna otra función\r\nconst renderCityAndCountry = eventOnClickCity => (cityAndCountry, weather) => {\r\n    const { city, countryCode } = cityAndCountry\r\n\r\n    return <CityListItem key={getCityCode(city, countryCode)} \r\n                eventOnClickCity={eventOnClickCity} \r\n                weather={weather} \r\n                {...cityAndCountry} /> \r\n}\r\n\r\n// cities: es un array, y en cada item tiene que tener la ciudad, pero además el country\r\n// ul: tag html para listas no ordenadas\r\nconst CityList = ({ cities, onClickCity }) => {\r\n    const actions = useWeatherDispatchContext()\r\n    const data = useWeatherStateContext()\r\n\r\n    const { allWeather } = data\r\n    const { error, setError } = useCityList(cities, allWeather, actions)\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                error && <Alert onClose={() => setError(null)} severity=\"error\">{error}</Alert>\r\n            }\r\n            <List>\r\n                {\r\n                    cities.map(cityAndCountry => renderCityAndCountry(onClickCity)(cityAndCountry, \r\n                        allWeather[getCityCode(cityAndCountry.city, cityAndCountry.countryCode)]))\r\n                }\r\n            </List>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nCityList.propTypes = {\r\n    cities: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            city: PropTypes.string.isRequired,\r\n            country: PropTypes.string.isRequired,\r\n            countryCode: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    onClickCity: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default React.memo(CityList)\r\n","const cities = [\r\n    { city: \"Buenos Aires\", country: \"Argentina\", countryCode: \"AR\"},\r\n    { city: \"Bogotá\", country: \"Colombia\", countryCode: \"CO\"},\r\n    { city: \"Madrid\", country: \"España\", countryCode: \"ES\"},\r\n    { city: \"Ciudad de México\", country: \"México\", countryCode: \"MX\"},\r\n]\r\n\r\nexport const getCities = () => (cities)\r\n\r\nexport const getCountryNameByCountryCode = (countryCode) => (\r\n    cities.filter(c => c.countryCode === countryCode)[0].country\r\n)","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport AppFrame from './../components/AppFrame'\r\nimport CityList from './../components/CityList'\r\nimport { getCities } from './../utils/serviceCities'\r\n\r\nconst MainPage = () => {\r\n    const history = useHistory()\r\n\r\n    const onClickHandler = React.useCallback((city, countryCode) => {\r\n        history.push(`/weather_app/city/${countryCode}/${city}`)\r\n    }, [history])\r\n\r\n    return (\r\n        <AppFrame>\r\n            <Paper elevation={3}>\r\n                <CityList\r\n                    cities={getCities()} \r\n                    onClickCity={onClickHandler} />\r\n            </Paper>\r\n        </AppFrame>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst WeatherDetails = ({ humidity, wind }) => {\r\n    return (\r\n        <>\r\n            <Typography>Humedad: {humidity}%</Typography>\r\n            <Typography>Viento: {wind} km/h</Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nWeatherDetails.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default WeatherDetails\r\n","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { LineChart, \r\n        Line, \r\n        CartesianGrid, \r\n        XAxis, \r\n        YAxis,\r\n        Tooltip,\r\n        Legend, \r\n        ResponsiveContainer } from 'recharts'\r\n\r\nconst ForecastChart = ({ data }) => {\r\n    const marginSize = useMemo(() => ({ top: 20, bottom: 20, left: 5, right: 5 }), [])\r\n    return (\r\n        <ResponsiveContainer height={250} width={\"95%\"}>\r\n            <LineChart\r\n                margin={marginSize}\r\n                data={data} >\r\n                <XAxis dataKey=\"dayHour\"></XAxis>\r\n                <YAxis></YAxis>\r\n                <CartesianGrid></CartesianGrid>\r\n                <Tooltip></Tooltip>\r\n                <Legend></Legend>\r\n                <Line type=\"monotone\" dataKey=\"max\" stroke=\"#FF0000\"></Line>\r\n                <Line type=\"monotone\" dataKey=\"min\" stroke=\"#0000FF\"></Line>\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    )\r\n}\r\n\r\nForecastChart.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            dayHour: PropTypes.string.isRequired,\r\n            min: PropTypes.number.isRequired,\r\n            max: PropTypes.number.isRequired,\r\n        }),\r\n    ).isRequired,\r\n}\r\n\r\nexport default ForecastChart\r\n","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { IconContext } from 'react-icons'\r\nimport IconState, { validValues } from './../IconState'\r\n\r\nconst ForecastItem = ({ weekDay, hour, state, temperature }) => {\r\n    const iconContextSize = useMemo(() => ({ size:'5em'}), [])\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\">\r\n            <Grid item>\r\n                <Typography>{weekDay}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>{hour}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <IconContext.Provider value={iconContextSize}>\r\n                    <IconState state={state} />\r\n                </IconContext.Provider>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography>{temperature} °</Typography>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nForecastItem.propTypes = {\r\n    weekDay: PropTypes.string.isRequired,\r\n    hour: PropTypes.number.isRequired,\r\n    state: PropTypes.oneOf(validValues).isRequired,\r\n    temperature: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default ForecastItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ForecastItem from './../ForecastItem'\r\nimport { validValues } from './../IconState'\r\n\r\nconst renderForecastItem = forecast => {\r\n    const { weekDay, hour, state, temperature } = forecast\r\n    // Hay que poner un identificador único\r\n    // Vamos a poner una \"marca\" para encontrar cada item (ForecastItem)\r\n    return (\r\n        <Grid \r\n            data-testid=\"forecast-item-container\" \r\n            item key={`${weekDay}${hour}`}>\r\n            <ForecastItem \r\n                hour={hour}\r\n                weekDay={weekDay}\r\n                state={state}\r\n                temperature={temperature}\r\n            ></ForecastItem>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst Forecast = ({ forecastItemList }) => {\r\n    return (\r\n        <Grid container\r\n            justify=\"space-around\"\r\n            alignItems=\"center\">\r\n            {\r\n                forecastItemList.map(forecast => renderForecastItem(forecast))\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// forecastItemList es un array de elementos\r\n// los elementos deben tener una \"forma\" en particular\r\n// las siguientes propiedades:\r\n/*\r\n    weekDay: PropTypes.string.isRequired,\r\n    hour: PropTypes.number.isRequired,\r\n    state: PropTypes.oneOf(validValues).isRequired,\r\n    temperature: PropTypes.number.isRequired,\r\n*/\r\nForecast.propTypes = {\r\n    forecastItemList: PropTypes.arrayOf(PropTypes.shape({\r\n        weekDay: PropTypes.string.isRequired,\r\n        hour: PropTypes.number.isRequired,\r\n        state: PropTypes.oneOf(validValues).isRequired,\r\n        temperature: PropTypes.number.isRequired,        \r\n    })).isRequired,\r\n}\r\n\r\nexport default Forecast\r\n","import { toCelsius } from './../utils'\r\nimport moment from 'moment'\r\n\r\nconst getChartData = (data) => {\r\n    console.log(\"data\", data)\r\n\r\n    const daysAhead = [0, 1, 2, 3, 4, 5]\r\n    const days = daysAhead.map(d => moment().add(d, 'd'))\r\n    const dataAux = days.map(day => {\r\n        const tempObjArray = data.list.filter(item => {\r\n            const dayOfYear = moment.unix(item.dt).dayOfYear()\r\n            return dayOfYear === day.dayOfYear()\r\n        })\r\n        console.log(\"day.dayOfYear()\", day.dayOfYear())\r\n        console.log(\"tempObjArray\", tempObjArray)\r\n\r\n        const temps = tempObjArray.map(item => item.main.temp)\r\n\r\n        // dayHour, min, max\r\n        return ({\r\n            dayHour: day.format('ddd'), \r\n            min: toCelsius(Math.min(...temps)), \r\n            max: toCelsius(Math.max(...temps)), \r\n            hasTemps: (temps.length > 0 ? true : false)\r\n        })\r\n    }).filter(item => item.hasTemps)\r\n\r\n    return dataAux\r\n}\r\n\r\nexport default getChartData","import { toCelsius } from './../utils'\r\nimport moment from 'moment'\r\nimport 'moment/locale/es'\r\n\r\nconst getForecastItemList = (data) => {\r\n    // { hour: 18, state:\"clouds\", temperature:17, weekDay:\"Jueves\" }\r\n    const interval = [4, 8, 12, 16, 20, 24]\r\n\r\n    const forecastItemListAux = data.list\r\n        .filter((item, index) => interval.includes(index))\r\n        .map(item => {\r\n            return ({\r\n                hour: moment.unix(item.dt).hour(),\r\n                weekDay: moment.unix(item.dt).format('dddd'),\r\n                state: item.weather[0].main.toLowerCase(),\r\n                temperature: toCelsius(item.main.temp)\r\n            })\r\n        }) \r\n    return forecastItemListAux   \r\n}\r\n\r\nexport default getForecastItemList","import { useEffect, useDebugValue } from 'react'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router-dom'\r\nimport { getForecastUrl } from './../utils/urls'\r\nimport getChartData from './../utils/transform/getChartData'\r\nimport getForecastItemList from './../utils/transform/getForecastItemList'\r\nimport { getCityCode } from './../utils/utils'\r\n\r\nconst useCityPage = (allChartData, allForecastItemList, actions) => {\r\n    const { city, countryCode } = useParams()\r\n\r\n    useDebugValue(`useCityPage ${city}`)\r\n\r\n    useEffect(() => {\r\n        const getForecast = async () => {\r\n            const url = getForecastUrl({ city, countryCode })\r\n            const cityCode = getCityCode(city, countryCode)\r\n            try {\r\n                const { data } = await axios.get(url)\r\n                \r\n                const dataAux = getChartData(data)\r\n\r\n                // onSetChartData({ [cityCode]: dataAux })\r\n                actions({ type: 'SET_CHART_DATA', payload: { [cityCode]: dataAux } })\r\n                const forecastItemListAux = getForecastItemList(data)\r\n\r\n                // onSetForecastItemList({ [cityCode]: forecastItemListAux })  \r\n                actions({ type: 'SET_FORECAST_ITEM_LIST', payload: { [cityCode]: forecastItemListAux } })          \r\n            } catch (error) {\r\n                console.log(error)            \r\n            }\r\n        }\r\n        const cityCode = getCityCode(city, countryCode)\r\n\r\n        if (allChartData && allForecastItemList && !allChartData[cityCode] && !allForecastItemList[cityCode]) {\r\n            getForecast()\r\n        }\r\n        \r\n\r\n    }, [city, countryCode, actions, allChartData, allForecastItemList])\r\n\r\n    return { city, countryCode }\r\n}\r\n\r\nexport default useCityPage","import React, { useMemo } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport AppFrame from './../components/AppFrame'\r\nimport CityInfo from './../components/CityInfo'\r\nimport Weather from './../components/Weather'\r\nimport WeatherDetails from './../components/WeatherDetails'\r\nimport ForecastChart from './../components/ForecastChart'\r\nimport Forecast from './../components/Forecast'\r\nimport useCityPage from './../hooks/useCityPage'\r\nimport useCityList from './../hooks/useCityList'\r\nimport { getCityCode } from './../utils/utils'\r\nimport { getCountryNameByCountryCode } from './../utils/serviceCities'\r\nimport { useWeatherDispatchContext, useWeatherStateContext } from '../WeatherContext'\r\n\r\nconst CityPage = () => {\r\n    const actions = useWeatherDispatchContext()\r\n    const data = useWeatherStateContext()\r\n\r\n    const { allWeather, allChartData, allForecastItemList } = data\r\n    // const { onSetAllWeather, onSetChartData, onSetForecastItemList } = actions\r\n    const { city, countryCode } = useCityPage(allChartData, allForecastItemList, actions)\r\n\r\n    const cities = useMemo(() => ([{ city, countryCode }]), [city, countryCode])\r\n\r\n    useCityList(cities, allWeather, actions)\r\n    \r\n    const cityCode = getCityCode(city, countryCode)\r\n\r\n    const weather = allWeather[cityCode]\r\n    const chartData = allChartData[cityCode]\r\n    const forecastItemList = allForecastItemList[cityCode]\r\n\r\n    const country = countryCode && getCountryNameByCountryCode(countryCode)\r\n    const humidity = weather && weather.humidity\r\n    const wind = weather && weather.wind\r\n\r\n    const state = weather && weather.state\r\n    const temperature = weather && weather.temperature\r\n\r\n    return (\r\n        <AppFrame>\r\n            <Grid container\r\n                justify=\"space-around\"\r\n                direction=\"column\"\r\n                spacing={2}>\r\n                <Grid item container \r\n                    xs={12} \r\n                    justify=\"center\"\r\n                    alignItems=\"flex-end\">\r\n                    <CityInfo city={city} country={country} />\r\n                </Grid>\r\n                <Grid container item xs={12}\r\n                    justify=\"center\">\r\n                    <Weather state={state} temperature={temperature} />\r\n                    {\r\n                        humidity && wind && \r\n                        <WeatherDetails \r\n                            humidity={humidity} \r\n                            wind={wind} />\r\n                    }\r\n                </Grid>\r\n                <Grid item>\r\n                    {\r\n                        !chartData && !forecastItemList && <LinearProgress />\r\n                    }\r\n                </Grid>\r\n                <Grid item>\r\n                    {\r\n                        chartData && <ForecastChart data={chartData} />\r\n                    }\r\n                </Grid>\r\n                <Grid item>\r\n                    {\r\n                        forecastItemList && <Forecast forecastItemList={forecastItemList} />\r\n                    }\r\n                </Grid>\r\n            </Grid>        \r\n        </AppFrame>\r\n    )\r\n}\r\n\r\nexport default CityPage\r\n","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Link from '@material-ui/core/Link'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { IconContext } from 'react-icons'\r\nimport { WiRain } from 'react-icons/wi'\r\n\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            className=\"full\">\r\n            <div className=\"highlight\">\r\n                <Grid item container xs={12}\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <Grid item>\r\n                        <IconContext.Provider value={{ size:\"6em\" }}>\r\n                            <WiRain />\r\n                        </IconContext.Provider>\r\n                    </Grid>\r\n                    <Grid item\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\">\r\n                        <Typography variant=\"h4\" color=\"inherit\">\r\n                            404 | La página no existe\r\n                        </Typography>\r\n                        <Link color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            component={RouterLink}\r\n                            to=\"/main\">\r\n                            Volver al inicio\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default NotFoundPage\r\n","import React from 'react'\r\nimport { BrowserRouter as Router,\r\n    Switch, \r\n    Route } from 'react-router-dom'\r\nimport WelcomePage from './pages/WelcomePage'\r\nimport MainPage from './pages/MainPage'\r\nimport CityPage from './pages/CityPage'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport { WeatherContext } from './WeatherContext'\r\n\r\nconst App = () => {\r\n    return (\r\n        <WeatherContext>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/weather_app\">\r\n                        <WelcomePage />\r\n                    </Route>\r\n                    <Route path=\"/weather_app/main\">\r\n                        <MainPage />\r\n                    </Route>      \r\n                    <Route path=\"/weather_app/city/:countryCode/:city\">\r\n                        <CityPage />\r\n                    </Route> \r\n                    <Route>\r\n                        <NotFoundPage />\r\n                    </Route>                                                           \r\n                </Switch>\r\n            </Router>\r\n        </WeatherContext>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL('https://BOTOOM.github.io/weather_app', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}